<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <title>Calculadora Energética</title>
  <link rel="stylesheet" href="{{ url_for('static', filename='css/estilo.css') }}">
  <!-- 1. Incluimos Chart.js -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>

  <h1>Calculadora Energética</h1>
  <p>Hola, {{ perfil['nombre'] }}.</p>

  <!-- 1. Gasto basal (renderizado con Jinja) -->
  <section>
    <h2>1. Gasto basal (sin ejercicio)</h2>
    <ul>
      <li><strong>Calorías totales:</strong>
        <span id="basal-total">{{ basal_plan['Total Calories'] }}</span> kcal
      </li>
      <li><strong>CHO:</strong>
        <span id="basal-cho">{{ basal_plan['CHO'] }}</span> g
      </li>
      <li><strong>Proteínas:</strong>
        <span id="basal-pro">{{ basal_plan['Protein'] }}</span> g
      </li>
      <li><strong>Grasas:</strong>
        <span id="basal-fat">{{ basal_plan['Fat'] }}</span> g
      </li>
    </ul>

    <h3>Reparto basal por comidas</h3>
    <table>
      <thead>
        <tr><th>Comida</th><th>kcal</th><th>%</th></tr>
      </thead>
      <tbody id="basal-dist-body">
        {% for comida, info in basal_dist.items() %}
        <tr>
          <td>{{ comida }}</td>
          <td>{{ info.calories }}</td>
          <td>{{ info.percent }}%</td>
        </tr>
        {% endfor %}
      </tbody>
    </table>

    <!-- 2a. Gráfico de macros basal -->
    <canvas id="basalMacroChart" width="400" height="200"></canvas>
  </section>

  <!-- 2. Formulario de ajuste -->
  <section>
    <h2>2. Ajusta con tu entrenamiento</h2>
    <form id="calc-form">
      <label>Peso (kg):
        <input type="number" name="weight" step="0.1"
               value="{{ perfil['peso'] or '' }}" required>
      </label><br>

      <label>Nivel de actividad:
        <select name="activity_level">
          <option value="sedentary"      {% if perfil['actividad']=='sedentary'      %}selected{% endif %}>Sedentario</option>
          <option value="lightly_active" {% if perfil['actividad']=='lightly_active' %}selected{% endif %}>Poco activo</option>
          <option value="moderately_active"{% if perfil['actividad']=='moderately_active'%}selected{% endif %}>Moderado</option>
          <option value="very_active"     {% if perfil['actividad']=='very_active'     %}selected{% endif %}>Muy activo</option>
          <option value="extra_active"    {% if perfil['actividad']=='extra_active'    %}selected{% endif %}>Extra activo</option>
        </select>
      </label><br>

      <fieldset>
        <legend>Ciclismo</legend>
        <label>Horas:
          <input type="number" name="bike_hrs" step="0.1" value="0">
        </label><br>
        <label>Potencia media (W):
          <input type="number" name="bike_power" step="1" value="0">
        </label><br>
        <label>FTP (W):
          <input type="number" name="bike_threshold" step="1" value="0">
        </label>
      </fieldset>

      <fieldset>
        <legend>Carrera</legend>
        <label>Horas:
          <input type="number" name="run_hrs" step="0.1" value="0">
        </label><br>
        <label>Ritmo medio (min/km):
          <input type="number" name="run_pace" step="0.1" value="0">
        </label><br>
        <label>Umbral (min/km):
          <input type="number" name="run_threshold" step="0.1" value="0">
        </label>
      </fieldset>

      <label>Objetivo:
        <select name="weight_loss">
          <option value="no">Mantener</option>
          <option value="yes">Pérdida</option>
          <option value="gain">Volumen</option>
        </select>
      </label><br>

      <button type="submit">Calcular</button>
    </form>
  </section>

  <!-- 3. Resultados ajustados -->
  <section id="adjusted-section" style="display:none">
    <h2>3. Gasto con ejercicio</h2>
    <ul>
      <li><strong>Calorías totales:</strong>
        <span id="adj-total"></span> kcal
      </li>
      <li><strong>CHO:</strong>
        <span id="adj-cho"></span> g
      </li>
      <li><strong>Proteínas:</strong>
        <span id="adj-pro"></span> g
      </li>
      <li><strong>Grasas:</strong>
        <span id="adj-fat"></span> g
      </li>
    </ul>

    <!-- 3a. Gráfico de macros ajustado -->
    <canvas id="adjustedMacroChart" width="400" height="200"></canvas>
  </section>

  <p><a href="{{ url_for('logout') }}">Cerrar sesión</a></p>

  <!-- 4. Script AJAX + Chart.js -->
  <script>
    // Creamos los charts globalmente
    let basalChart, adjustedChart;

    function buildChart(ctx, title, labels, data) {
      return new Chart(ctx, {
        type: 'bar',
        data: { labels, datasets: [{ label: title, data }] },
        options: {
          responsive: true,
          plugins: {
            legend: { display: false },
            title: { display: true, text: title }
          },
          scales: { y: { beginAtZero: true } }
        }
      });
    }

    document.addEventListener('DOMContentLoaded', () => {
      // 1) Gráfico basal inicial con datos Jinja
      const basalData = [
        {{ basal_plan['CHO'] }}, 
        {{ basal_plan['Protein'] }}, 
        {{ basal_plan['Fat'] }}
      ];
      const labels = ['CHO (g)', 'Proteínas (g)', 'Grasas (g)'];

      const ctxBasal = document.getElementById('basalMacroChart').getContext('2d');
      basalChart = buildChart(ctxBasal, 'Macros - Basal', labels, basalData);

      const ctxAdj = document.getElementById('adjustedMacroChart').getContext('2d');
      adjustedChart = buildChart(ctxAdj, 'Macros - Con ejercicio', labels, [0,0,0]);

      // 2) Al enviar formulario, calculamos
      document.getElementById('calc-form').addEventListener('submit', async e => {
        e.preventDefault();
        const form = e.target;
        const data = {};
        new FormData(form).forEach((v,k) => {
          data[k] = isNaN(v) ? v : parseFloat(v);
        });

        const res = await fetch('{{ url_for("api_calcular") }}', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(data)
        });
        const json = await res.json();

        // Actualizar basal en pantalla
        document.getElementById('basal-total').textContent = json.basal_plan['Total Calories'];
        document.getElementById('basal-cho').textContent   = json.basal_plan.CHO;
        document.getElementById('basal-pro').textContent   = json.basal_plan.Protein;
        document.getElementById('basal-fat').textContent   = json.basal_plan.Fat;

        // Tabla reparto basal
        const tbody = document.getElementById('basal-dist-body');
        tbody.innerHTML = '';
        for (const [meal, info] of Object.entries(json.basal_dist)) {
          const tr = document.createElement('tr');
          tr.innerHTML = `<td>${meal}</td><td>${info.calories}</td><td>${info.percent}%</td>`;
          tbody.appendChild(tr);
        }

        // Mostrar sección ajustada
        document.getElementById('adj-total').textContent = json.adjusted_plan['Total Calories'];
        document.getElementById('adj-cho').textContent   = json.adjusted_plan.CHO;
        document.getElementById('adj-pro').textContent   = json.adjusted_plan.Protein;
        document.getElementById('adj-fat').textContent   = json.adjusted_plan.Fat;
        document.getElementById('adjusted-section').style.display = 'block';

        // Actualizar gráfico ajustado
        const adj = json.adjusted_plan;
        adjustedChart.data.datasets[0].data = [adj.CHO, adj.Protein, adj.Fat];
        adjustedChart.update();
      });
    });
  </script>
</body>
</html>
